---
- name: leapp_corrupted_grubenv_file | Detected a corrupted grubenv file
  vars:
    entry_title: Detected a corrupted grubenv file
    leapp_report_location: /var/log/leapp/leapp-report.json
  block:
    - name: leapp_corrupted_grubenv_file | Check that the leapp-report.json exists
      ansible.builtin.stat:
        path: "{{ leapp_report_location }}"
      register: leapp_report_stat

    - name: leapp_corrupted_grubenv_file | End play if no leapp report exists
      ansible.builtin.set_fact:
        leapp_report_missing: true
      when: leapp_report_stat.stat.exists is false
      failed_when: leapp_report_stat.stat.exists is false

    - name: leapp_corrupted_grubenv_file | Read leapp report
      ansible.builtin.slurp:
        src: "{{ leapp_report_location }}"
      register: leappreport

    - name: leapp_corrupted_grubenv_file | Parse leapp report to json
      ansible.builtin.set_fact:
        leappreportdata: "{{ leappreport.content | b64decode | from_json }}"

    - name: leapp_corrupted_grubenv_file | Find matching entries
      ansible.builtin.set_fact:
        hint: "{{ item.detail.remediations | selectattr('type', 'eq', 'hint') | first }}"
      loop: "{{ leappreportdata.entries }}"
      when: item.title is match(entry_title) and (item.detail.remediations | selectattr('type', 'eq', 'hint') | length > 0)

    - name: leapp_corrupted_grubenv_file | End execution of playbook if no entry found in leapp report
      ansible.builtin.set_fact:
        leapp_report_missing: true
      failed_when: hint is not defined

    - name: leapp_corrupted_grubenv_file | Extract file(s) using regex
      ansible.builtin.set_fact:
        files_grub: "{{ hint.context | regex_findall('Delete (.+?) file', '\\1') | first | split(',') | map('trim') }}"

    - name: leapp_corrupted_grubenv_file | Backup file(s)
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ item }}.backup"
        mode: "0644"
      with_items: "{{ files_grub }}"

    - name: leapp_corrupted_grubenv_file | Find grub.cfg file
      ansible.builtin.command: find /boot -name 'grub.cfg'
      register: grub_cfg_path
      changed_when: grub_cfg_path.rc == 0

    - name: leapp_corrupted_grubenv_file | Backup grub.cfg file
      ansible.builtin.copy:
        src: "{{ grub_cfg_path.stdout }}"
        dest: "{{ grub_cfg_path.stdout }}.backup"
        mode: "0644"

    - name: leapp_corrupted_grubenv_file | Delete file(s)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ files_grub }}"

    - name: leapp_corrupted_grubenv_file | Regenerate grub config
      ansible.builtin.command: grub2-mkconfig -o {{ grub_cfg_path.stdout }}
      register: grub_mkconfig
      changed_when: grub_mkconfig.rc == 0

  rescue:
    - name: leapp_corrupted_grubenv_file | Continue when leapp report is missing
      ansible.builtin.debug:
        msg: "Leapp report missing or did not contain any matches. Skipping this task."
      when: leapp_report_missing is defined and leapp_report_missing is true
...
