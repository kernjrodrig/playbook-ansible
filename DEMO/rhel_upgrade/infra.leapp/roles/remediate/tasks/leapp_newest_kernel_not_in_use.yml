---
- name: leapp_newest_kernel_not_in_use | Boot to latest kernel
  block:
    - name: leapp_newest_kernel_not_in_use | Get list of installed kernels packages sorted by the newest version
      ansible.builtin.shell: |
        set -o pipefail
        rpm -q kernel --queryformat '%{version}-%{release}.%{arch}\n' | sort -Vr
      register: installed_kernels
      changed_when: false

    - name: leapp_newest_kernel_not_in_use | Get the default kernel
      ansible.builtin.shell: |
        set -o pipefail
        grubby --default-kernel | sed 's/^\/boot\/vmlinuz\-//'
      register: default_kernel_version
      changed_when: false

    # If the two strings are the same, fail out to the rescue block
    - name: leapp_newest_kernel_not_in_use | Check the kernel versions
      ansible.builtin.set_fact:
        leapp_newest_kernel_in_use: true
      when: installed_kernels.stdout_lines[0] == default_kernel_version.stdout
      failed_when: installed_kernels.stdout_lines[0] == default_kernel_version.stdout

    - name: leapp_newest_kernel_not_in_use | Set default kernel to latest
      ansible.builtin.command: grubby --set-default /boot/vmlinuz-{{ installed_kernels.stdout_lines[0] }}
      register: set_default_kernel
      changed_when: set_default_kernel.rc == 0

    - name: leapp_newest_kernel_not_in_use | Update-and-reboot | Reboot when updates applied
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"
        post_reboot_delay: "{{ post_reboot_delay }}"
      timeout: "{{ reboot_timeout }}"

  rescue:
    - name: leapp_newest_kernel_not_in_use | Continue when the latest version is the default
      ansible.builtin.debug:
        msg: "The newest kernel is already in use. Skipping this task."
      when: leapp_newest_kernel_in_use is defined and leapp_newest_kernel_in_use is true

...
