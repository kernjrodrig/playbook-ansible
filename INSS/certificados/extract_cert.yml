---
# Obtener el secreto TLS del Ingress Controller
- name: Obtener secreto TLS del cluster {{ item.name }}
  kubernetes.core.k8s_info:
    host: "{{ item.api_url }}"
    api_key: "{{ item.token }}"
    api_version: v1
    kind: Secret
    name: "{{ item.secret_name }}"
    namespace: "{{ item.namespace_ingress }}"
    verify_ssl: false
  register: secret_data

# Verificar si el secreto fue encontrado
- name: Validar existencia del secreto en el cluster {{ item.name }}
  ansible.builtin.fail:
    msg: "El secreto {{ item.secret_name }} no existe en el namespace {{ item.namespace_ingress }} del cluster {{ item.name }}"
  when: secret_data.resources | length == 0

# Extraer y guardar el certificado en un archivo temporal
- name: Extraer y guardar certificado en un archivo temporal para el cluster {{ item.name }}
  ansible.builtin.copy:
    content: "{{ secret_data.resources[0].data['tls.crt'] | b64decode }}"
    dest: "{{ item.cert_file }}"
    mode: '0600'
  when: secret_data.resources | length > 0

# Verificar la fecha de expiración del certificado
- name: Obtener información del certificado del cluster {{ item.name }}
  community.crypto.x509_certificate_info:
    path: "{{ item.cert_file }}"
  register: cert_info
  failed_when: cert_info.not_after is not defined

### Calcular timestamp de expiración
- name: Obtener timestamp UNIX de la fecha de expiración
  ansible.builtin.set_fact:
    expiry_timestamp: "{{ (cert_info.not_after | to_datetime('%Y%m%d%H%M%SZ')).strftime('%s') | int }}"
  when: cert_info.not_after is defined

# Definir el timestamp actual
- name: Definir el timestamp actual
  ansible.builtin.set_fact:
    current_timestamp: "{{ ansible_date_time.epoch | int }}"

# Calcular días hasta el vencimiento
- name: Calcular días hasta el vencimiento
  ansible.builtin.set_fact:
    days_to_expiry: "{{ (((expiry_timestamp | int) - (current_timestamp | int)) / 86400) | int }}"
  when: expiry_timestamp is defined

# Mostrar días restantes para el vencimiento
- name: Mostrar días restantes para el vencimiento del certificado del cluster {{ item.name }}
  ansible.builtin.debug:
    msg: "Faltan {{ days_to_expiry }} días para el vencimiento del certificado del cluster {{ item.name }}"
  when: expiry_timestamp is defined

- name: Reemplazar certificado si faltan menos de 60 días para el vencimiento
  ansible.builtin.include_tasks:
    file: reemplaza.yml
  vars:
    cluster: "{{ item }}"
  when: days_to_expiry is defined and (days_to_expiry | int) < 60

# - name: Reemplazar certificado si faltan menos de 60 días para el vencimiento
#   ansible.builtin.include_tasks:
#     file: reemplaza.yml
#   when: days_to_expiry is defined and (days_to_expiry | int) < 60